# Generated by Django 5.0.6 on 2024-09-24 11:26

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Job',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('submission_date', models.DateTimeField(auto_now_add=True, verbose_name='Submission date')),
                ('run_start_date', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Run start date')),
                ('run_end_date', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Run end date')),
                ('first_download_date', models.DateTimeField(blank=True, default=None, null=True, verbose_name='First download date')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is deleted?')),
                ('state', models.CharField(choices=[('BL', 'Blocked'), ('WA', 'Waiting'), ('RU', 'Running'), ('FI', 'Finished'), ('FA', 'Failed')], default='BL', max_length=2, verbose_name='Job state')),
            ],
        ),
        migrations.CreateModel(
            name='ChallengeSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Unnamed submission', max_length=200, verbose_name='Submission name')),
                ('email', models.EmailField(blank=True, default='', max_length=200, verbose_name='Email address')),
                ('challenge', models.CharField(choices=[('PS', 'Photolithographic DNA synthesis'), ('DD', 'DNA decay after long-term storage')], default='DD', max_length=2, verbose_name='Challenge type')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobs.job')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BasicSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Unnamed submission', max_length=200, verbose_name='Submission name')),
                ('email', models.EmailField(blank=True, default='', max_length=200, verbose_name='Email address')),
                ('scenario', models.CharField(choices=[('DB', 'Density Benchmark Scenario'), ('HD', 'High-Density Storage Scenario'), ('WC', 'Worst Case Scenario'), ('LS', 'Long-Term Storage Scenario')], default='DB', max_length=2, verbose_name='Scenario type')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobs.job')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdvancedSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Unnamed submission', max_length=200, verbose_name='Submission name')),
                ('email', models.EmailField(blank=True, default='', max_length=200, verbose_name='Email address')),
                ('synthesis_type', models.CharField(choices=[('EC', 'Electrochemical synthesis (e.g. Genscript)'), ('MD', 'Material deposition-based synthesis (e.g. Twist)')], default=None, max_length=2, verbose_name='Synthesis type')),
                ('synthesis_coverage', models.IntegerField(default=100, validators=[django.core.validators.MaxValueValidator(500), django.core.validators.MinValueValidator(1)], verbose_name='Synthesis coverage')),
                ('synthesis_homogeneity', models.FloatField(default=0.5, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)], verbose_name='Synthesis homogeneity')),
                ('pcr_polymerase', models.CharField(choices=[('TAQ', 'Taq-based (fidelity ~ 1)'), ('HFi', 'Generic high fidelity (fidelity ~ 40)'), ('Q5H', 'Q5 HiFi (fidelity ~ 280)'), ('EXO', 'exonuclease-deficient (fidelity ~ 0.3)')], default=None, max_length=3, verbose_name='Polymerase type')),
                ('pcr_efficiency', models.IntegerField(default=90, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(50)], verbose_name='PCR efficiency')),
                ('pcr_homogeneity', models.FloatField(default=0.5, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)], verbose_name='PCR Efficiency homogeneity')),
                ('pcr_cycles', models.IntegerField(default=30, validators=[django.core.validators.MaxValueValidator(150), django.core.validators.MinValueValidator(0)], verbose_name='PCR cycles')),
                ('storage_enabled', models.BooleanField(default=True, verbose_name='Storage enabled')),
                ('storage_coverage', models.FloatField(default=20, validators=[django.core.validators.MaxValueValidator(200), django.core.validators.MinValueValidator(1)], verbose_name='Storage coverage')),
                ('storage_halflives', models.FloatField(default=1, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)], verbose_name='Storage half-lives')),
                ('sequencing_paired', models.BooleanField(default=True, verbose_name='Sequencing in paired-read mode enabled')),
                ('sequencing_depth', models.IntegerField(default=20, validators=[django.core.validators.MaxValueValidator(50), django.core.validators.MinValueValidator(1)], verbose_name='Sequencing depth')),
                ('sequencing_length', models.IntegerField(default=150, validators=[django.core.validators.MaxValueValidator(300), django.core.validators.MinValueValidator(30)], verbose_name='Sequencing length')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobs.job')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
